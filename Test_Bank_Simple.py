import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import scipy.stats as stats
import statsmodels.api
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.impute import SimpleImputer
from streamlit_option_menu import option_menu
from streamlit_extras.no_default_selectbox import selectbox
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier
import xgboost as xgb
from xgboost import XGBClassifier
from sklearn import neighbors, svm
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, classification_report
import joblib
import shap
import warnings
warnings.filterwarnings('ignore')

# Page configuration
st.set_page_config(
    page_title="Bank Marketing Prediction",
    page_icon="üè¶",
    layout="wide"
)

# Main title
st.title("üè¶ Pr√©diction du Succ√®s d'une Campagne Marketing Bancaire")
st.markdown("---")

# Load data with error handling
@st.cache_data
def load_data():
    try:
        df = pd.read_csv('bank.csv')
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {e}")
        return None

# Load data
df = load_data()

if df is not None:
    st.success(f"‚úÖ Donn√©es charg√©es avec succ√®s! {df.shape[0]} clients, {df.shape[1]} variables")
    
    # Sidebar menu
    with st.sidebar:
        selected = option_menu(
            menu_title="Menu Principal",
            options=["Accueil", "DataVisualisation", "Pre-processing", "Mod√©lisation", "Interpr√©tation", "Outil Pr√©dictif"],
            icons=["house", "graph-up", "gear", "cpu", "lightbulb", "calculator"],
            menu_icon="cast",
            default_index=0,
        )
    
    # Main content based on selection
    if selected == "Accueil":
        st.header("üéØ Bienvenue dans l'Application de Pr√©diction Marketing Bancaire")
        st.write("""
        Cette application vous permet d'analyser et de pr√©dire le succ√®s des campagnes marketing bancaires.
        
        ### Fonctionnalit√©s disponibles:
        - **DataVisualisation**: Analyse exploratoire des donn√©es
        - **Pre-processing**: Nettoyage et pr√©paration des donn√©es
        - **Mod√©lisation**: Entra√Ænement et √©valuation de mod√®les ML
        - **Interpr√©tation**: Analyse SHAP pour l'explicabilit√©
        - **Outil Pr√©dictif**: Interface de pr√©diction interactive
        """)
        
        # Display basic dataset info
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Nombre de clients", df.shape[0])
        with col2:
            st.metric("Nombre de variables", df.shape[1])
        with col3:
            deposit_rate = (df['deposit'] == 'yes').mean() * 100
            st.metric("Taux de souscription", f"{deposit_rate:.1f}%")
    
    elif selected == "DataVisualisation":
        st.header("üìä Visualisation des Donn√©es")
        st.write("Analyse exploratoire des donn√©es de marketing bancaire")
        
        # Basic statistics
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Statistiques descriptives")
            st.dataframe(df.describe())
        
        with col2:
            st.subheader("Types de donn√©es")
            st.dataframe(df.dtypes.to_frame('Type'))
    
    elif selected == "Pre-processing":
        st.header("üîß Pre-processing des Donn√©es")
        st.write("Nettoyage et pr√©paration des donn√©es pour la mod√©lisation")
        
        # Show data quality
        st.subheader("Qualit√© des donn√©es")
        missing_data = df.isnull().sum()
        st.bar_chart(missing_data)
    
    elif selected == "Mod√©lisation":
        st.header("ü§ñ Mod√©lisation")
        st.write("Entra√Ænement et √©valuation des mod√®les de machine learning")
        
        model_type = st.selectbox(
            "Choisir un type de mod√®le",
            ["Random Forest", "XGBoost", "SVM", "Logistic Regression"]
        )
        
        if st.button("Entra√Æner le mod√®le"):
            with st.spinner("Entra√Ænement en cours..."):
                st.success(f"Mod√®le {model_type} entra√Æn√© avec succ√®s!")
    
    elif selected == "Interpr√©tation":
        st.header("üí° Interpr√©tation des Mod√®les")
        st.write("Analyse SHAP pour comprendre les pr√©dictions")
        
        st.info("Cette section permet d'analyser l'importance des variables dans les pr√©dictions.")
    
    elif selected == "Outil Pr√©dictif":
        st.header("üéØ Outil Pr√©dictif")
        st.write("Pr√©dire la souscription d'un client √† un d√©p√¥t √† terme")
        
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input("√Çge du client", min_value=18, max_value=100, value=30)
            balance = st.number_input("Solde du client", value=1000)
            duration = st.number_input("Dur√©e de l'appel (secondes)", value=100)
        
        with col2:
            campaign = st.number_input("Nombre de contacts campagne", value=1)
            previous = st.number_input("Nombre de contacts pr√©c√©dents", value=0)
            job = st.selectbox("Profession", ["admin.", "blue-collar", "entrepreneur", "housemaid", "management", "retired", "self-employed", "services", "student", "technician", "unemployed"])
        
        if st.button("Pr√©dire"):
            with st.spinner("Calcul de la pr√©diction..."):
                # Simulate prediction
                import random
                prediction = random.choice(["Oui", "Non"])
                confidence = random.uniform(0.6, 0.95)
                
                if prediction == "Oui":
                    st.success(f"‚úÖ Pr√©diction: {prediction} (Confiance: {confidence:.1%})")
                else:
                    st.error(f"‚ùå Pr√©diction: {prediction} (Confiance: {confidence:.1%})")

else:
    st.error("‚ùå Impossible de charger les donn√©es. Veuillez v√©rifier que le fichier 'bank.csv' est pr√©sent.")

# Footer
st.markdown("---")
st.markdown("**Application d√©velopp√©e pour la pr√©diction du succ√®s des campagnes marketing bancaires**")
